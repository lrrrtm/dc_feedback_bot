# -*- coding: utf-8 -*-
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, executor
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

db = sqlite3.connect("files/database1.db")
cur = db.cursor()

WORKING = False
API_TOKEN = "6379303105:AAGUNqdnvs4a8Km24pY4mz_qcgS6ir5D6lg"
ADMIN = -1001874740927
MAIN_KEY = 4892

bot = Bot(token=API_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot, storage=MemoryStorage())

edutaiment_dict = {}
module_dict = {}


class form_edutaiment(StatesGroup):
    comment_1 = State()
    comment_2 = State()
    comment_3 = State()
    comment_4 = State()
    comment_5 = State()


class form_modules(StatesGroup):
    comment = State()

class form_key(StatesGroup):
    key = State()

def is_registered(tID):
    cur.execute(f"SELECT * from users where tID = {tID}")
    data = cur.fetchall()
    if len(data) == 0:
        return False
    return True

@dp.callback_query_handler()
async def check_callback(callback: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        reply_markup=None)

    data = callback.data.split("_")
    print(data)
    if data[0] == "start":
        if data[1] == "feedback":
            await bot.edit_message_text(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        text=f"–í—ã–±—Ä–∞–Ω–æ: *–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìù*"
                                             f"\n\n_–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏ /start_")
            module_dict[callback.message.chat.id] = {}
            row = []
            for a in range(1, 6):
                row.append(types.InlineKeyboardButton(text=f"{a}", callback_data=f"group_{a}"))
            kb_answer = types.InlineKeyboardMarkup(inline_keyboard=[row])
            await callback.message.answer(text=f"*–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–≤–∞—Ä—Ç–∞–ª?*", reply_markup=kb_answer)


        elif data[1] == "edutaiment":
            await bot.edit_message_text(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        text=f"–í—ã–±—Ä–∞–Ω–æ: *–∏–≥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ üéÆ*"
                                             f"\n\n_–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏ /start_")
            edutaiment_dict[callback.message.chat.id] = {}
            row = []
            for a in range(1, 6):
                row.append(types.InlineKeyboardButton(text=f"{a}", callback_data=f"edu_{a}"))
            kb_answer = types.InlineKeyboardMarkup(inline_keyboard=[row])
            await callback.message.answer(text=f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª*", reply_markup=kb_answer)

    elif data[0] == "group":
        group = int(data[1])
        module_dict[callback.message.chat.id]['group'] = group
        cur.execute(f"SELECT * FROM list")
        modules = cur.fetchall()
        print(modules)
        kb_answer = types.InlineKeyboardMarkup(row_width=1)
        for a in modules:
            btn = types.InlineKeyboardButton(text=a[0], callback_data=f"module_{a[1]}")
            kb_answer.add(btn)
        await callback.message.answer(text="*–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –º–æ–¥—É–ª—å*", reply_markup=kb_answer)

    elif data[0] == "module":
        module_dict[callback.message.chat.id]['module'] = data[1]
        await callback.message.answer(text="*–ö–∞–∫ —Ç–µ–±–µ –∑–∞–Ω—è—Ç–∏–µ? –ù–∞–ø–∏—à–∏, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å*")
        await form_modules.comment.set()

    elif data[0] == "pdf":
        module = data[1]
        day = str(datetime.now().strftime("%d-%m-%Y"))
        feedback = cur.execute(
            f"SELECT groupe, comment FROM modules WHERE post_date = \"{day}\" AND module = \"{module}\"").fetchall()
        module_name = cur.execute(f"SELECT name FROM list WHERE id = \"{module}\"").fetchall()[0]
        text_to_send = f"*{module_name[0]}* –∑–∞ _{datetime.now().strftime('%d.%m.%Y')}_\n\n"
        for a in feedback:
            text_to_send += f"{a[1]} ({a[0]} –∫–≤–∞—Ä—Ç–∞–ª)\n\n"
        await callback.message.answer(text=text_to_send)

    elif data[0] == "edu":
        edutaiment_dict[callback.message.chat.id]['group'] = int(data[1])
        await callback.message.answer(
            text="*1. –ï—Å—Ç—å –ª–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–µ—Ç–µ–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¶–µ–Ω—Ç—Ä–æ–ø–æ–ª–∏—Å–µ?*")
        await form_edutaiment.comment_1.set()

@dp.message_handler(commands=['menu'])
async def command_start(message: types.Message):
    global WORKING
    tID = message.chat.id

    if tID != ADMIN and is_registered(tID):
        if WORKING:
            kb_answer = types.InlineKeyboardMarkup(row_width=1)
            btn_1 = types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìù", callback_data="start_feedback")
            btn_2 = types.InlineKeyboardButton(text="–ò–≥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ üéÆ", callback_data="start_edutaiment")
            kb_answer.add(btn_1, btn_2)
            await message.answer(text="*–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å*",
                                 reply_markup=kb_answer)
        else:
            await message.answer("*–°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–ø–æ–∑–∂–µ*")

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    global WORKING
    tID = message.chat.id
    if tID == ADMIN:
        WORKING = True
        await message.answer(f"*–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!*"
                             f"\n\n_–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop_")
        # –†–ê–°–°–´–õ–ö–ê –í–°–ï–ú –û –ù–ê–ß–ê–õ–ï

    else:
        print(is_registered(tID))
        if is_registered(tID) == False:
            await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –Ω–∞ —Å–º–µ–Ω–µ ¬´–¶–µ–Ω—Ç—Ä–æ–ø–æ–ª–∏—Å: –∫—É—Ä—Å –Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è¬ª!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ —Å–∫–∞–∂—É—Ç —Ç–≤–æ–∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ")
            await form_key.key.set()
        else:
            await message.answer("*–¢—ã —É–∂–µ –≤–≤—ë–ª –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –Ω–∞–∂–º–∏ /menu*")

@dp.message_handler(commands=['stop'])
async def command_start(message: types.Message):
    global WORKING
    tID = message.chat.id
    if tID == ADMIN:
        WORKING = False
        await message.answer(f"*–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*"
                             f"\n\n_–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start_")

@dp.message_handler(commands=['all'])
async def command_pdf(message: types.Message):
    cur.execute(f"SELECT * FROM list")
    modules = cur.fetchall()
    print(modules)
    kb_answer = types.InlineKeyboardMarkup(row_width=1)
    for a in modules:
        btn = types.InlineKeyboardButton(text=a[0], callback_data=f"pdf_{a[1]}")
        kb_answer.add(btn)
    await message.answer(text="*–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—á—ë—Ç–∞*", reply_markup=kb_answer)

@dp.message_handler(state=form_key.key)
async def process_rename(message: types.Message, state: FSMContext):
    await state.finish()
    key = int(message.text)
    if key == MAIN_KEY:
        cur.execute(f"INSERT INTO users (tID) VALUES ({message.chat.id})")
        await message.answer("*–û—Ç–ª–∏—á–Ω–æ, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /menu\n\n–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è!*")
    else:
        await message.answer("–£–ø—Å, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏ –Ω–∞ /start –∏ –≤–≤–µ–¥–∏ –∫–æ–¥")

@dp.message_handler(state=form_edutaiment.comment_1)
async def process_rename(message: types.Message, state: FSMContext):
    if message.text != "/start":
        await state.finish()
        edutaiment_dict[message.chat.id]["comment_1"] = message.text
        await message.answer("*2. –ö–∞–∫ –∫–≤–∞—Ä—Ç–∞–ª—è—Ç–∞–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏? –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å ? –ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?*")
        await form_edutaiment.comment_2.set()

    else:
        await state.finish()
        del edutaiment_dict[message.chat.id]
        await command_start(message)


@dp.message_handler(state=form_edutaiment.comment_2)
async def process_rename(message: types.Message, state: FSMContext):
    if message.text != "/start":
        await state.finish()
        edutaiment_dict[message.chat.id]["comment_2"] = message.text
        await message.answer("*3. –ü–æ–Ω–∏–º–∞—é—Ç –ª–∏ –∫–≤–∞—Ä—Ç–∞–ª—è—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–æ–≤–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è?*")
        await form_edutaiment.comment_3.set()

    else:
        await state.finish()
        del edutaiment_dict[message.chat.id]
        await command_start(message)

@dp.message_handler(state=form_edutaiment.comment_4)
async def process_rename(message: types.Message, state: FSMContext):
    if message.text != "/start":
        await state.finish()
        edutaiment_dict[message.chat.id]["comment_4"] = message.text
        await message.answer("*5. –î–æ–Ω–µ—Å–ª–∏ –ª–∏ –≥–ª–∞–≤—ã —Å—É—Ç—å —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞?*")
        await form_edutaiment.comment_5.set()

    else:
        await state.finish()
        del edutaiment_dict[message.chat.id]
        await command_start(message)

@dp.message_handler(state=form_edutaiment.comment_5)
async def process_rename(message: types.Message, state: FSMContext):
    if message.text != "/start":
        await state.finish()
        edutaiment_dict[message.chat.id]["comment_5"] = message.text
        cur.execute(
            f"INSERT INTO edutaiment (telegram_id, post_date, comment_1, comment_2, comment_3) VALUES ({message.chat.id}, \"{datetime.now()}\", \"{edutaiment_dict[message.chat.id]['comment_1']}\", \"{edutaiment_dict[message.chat.id]['comment_2']}\", \"{edutaiment_dict[message.chat.id]['comment_3']}\")")
        db.commit()
        await bot.send_message(chat_id=ADMIN,
                               text="*–ò–≥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞*"
                                    f"\n\n*–ö–≤–∞—Ä—Ç–∞–ª:* {edutaiment_dict[message.chat.id]['group']}"
                                    f"\n*1.* {edutaiment_dict[message.chat.id]['comment_1']}"
                                    f"\n*2.* {edutaiment_dict[message.chat.id]['comment_2']}"
                                    f"\n*3.* {edutaiment_dict[message.chat.id]['comment_3']}"
                                    f"\n*4.* {edutaiment_dict[message.chat.id]['comment_4']}"
                                    f"\n*5.* {edutaiment_dict[message.chat.id]['comment_5']}")
        print(edutaiment_dict[message.chat.id])
        await message.answer("*–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏–Ω—è—Ç–∞, —Å–ø–∞—Å–∏–±–æ!*")
        edutaiment_dict[message.chat.id] = {}

    else:
        await state.finish()
        del edutaiment_dict[message.chat.id]
        await command_start(message)


@dp.message_handler(state=form_edutaiment.comment_3)
async def process_rename(message: types.Message, state: FSMContext):
    if message.text != "/start":
        await state.finish()
        edutaiment_dict[message.chat.id]["comment_3"] = message.text
        await message.answer("*4. –ö–∞–∫ –¥–µ—Ç–∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—é —Å —Ü–µ–Ω—Ç—Ä–∏–∫–∞–º–∏? –ü–æ–Ω—è–ª–∏ –ª–∏ –æ–Ω–∏ , —á—Ç–æ –≤ —ç—Ç–æ–º –µ—Å—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ—Ç–∏–≤?*")
        await form_edutaiment.comment_4.set()

    else:
        await state.finish()
        del edutaiment_dict[message.chat.id]
        await command_start(message)


@dp.message_handler(state=form_modules.comment)
async def process_rename(message: types.Message, state: FSMContext):
    if message.text != "/start":
        await state.finish()
        module_dict[message.chat.id]["comment"] = message.text
        module_name = \
            cur.execute(f"SELECT name FROM list WHERE id = \"{module_dict[message.chat.id]['module']}\"").fetchall()[0]

        print(
            f"INSERT INTO modules (telegram_id, post_date, module, groupe, comment) VALUES ({message.chat.id}, \"{datetime.now().strftime('%d-%m-%Y')}\", \"{module_dict[message.chat.id]['module']}\", {module_dict[message.chat.id]['group']}, \"{module_dict[message.chat.id]['comment']}\")")
        cur.execute(
            f"INSERT INTO modules (telegram_id, post_date, module, groupe, comment) VALUES ({message.chat.id}, \"{datetime.now().strftime('%d-%m-%Y')}\", \"{module_dict[message.chat.id]['module']}\", {module_dict[message.chat.id]['group']}, \"{module_dict[message.chat.id]['comment']}\")")
        db.commit()
        # print(cur.execute(f"INSERT INTO modules (telegram_id, post_date, module, group, comment) VALUES ({message.chat.id}, \"{datetime.now().strftime('%d-%m-%Y')}\", \"{module_dict[message.chat.id]['module']}\", {module_dict[message.chat.id]['group']}, \"{module_dict[message.chat.id]['comment']}\")"))

        await bot.send_message(chat_id=ADMIN,
                               text="*–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*"
                                    f"\n\n–ö–≤–∞—Ä—Ç–∞–ª: *{module_dict[message.chat.id]['group']}*"
                                    f"\n–ú–æ–¥—É–ª—å: *{module_name[0]}*"
                                    f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{module_dict[message.chat.id]['comment']}*")
        await message.answer("*–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –±–æ–ª—å—à–æ–µ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!*")
        module_dict[message.chat.id] = {}

    else:
        await state.finish()
        del module_dict[message.chat.id]
        await command_start(message)


async def on_startup():
    await bot.send_message(chat_id=ADMIN, text="*–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –°—Ç–∞—Ç—É—Å: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*"
                                               "\n\n_–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start_")


if __name__ == "__main__":
    executor.start(dp, on_startup())
    executor.start_polling(dp, skip_updates=True)

